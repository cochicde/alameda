// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/bob/Documents/project/go/src/prophetstor.com/alameda/internal/pkg/message-queue/kafka/interface.go

// Package mock_kafka is a generated GoMock package.
package mock_kafka

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Open mocks base method
func (m *MockClient) Open() error {
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockClientMockRecorder) Open() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockClient)(nil).Open))
}

// Close mocks base method
func (m *MockClient) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ListTopics mocks base method
func (m *MockClient) ListTopics(ctx context.Context) ([]string, error) {
	ret := m.ctrl.Call(m, "ListTopics", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopics indicates an expected call of ListTopics
func (mr *MockClientMockRecorder) ListTopics(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopics", reflect.TypeOf((*MockClient)(nil).ListTopics), ctx)
}

// ListConsumerGroups mocks base method
func (m *MockClient) ListConsumerGroups(ctx context.Context) ([]string, error) {
	ret := m.ctrl.Call(m, "ListConsumerGroups", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConsumerGroups indicates an expected call of ListConsumerGroups
func (mr *MockClientMockRecorder) ListConsumerGroups(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConsumerGroups", reflect.TypeOf((*MockClient)(nil).ListConsumerGroups), ctx)
}

// ListConsumeTopics mocks base method
func (m *MockClient) ListConsumeTopics(ctx context.Context, consumerGroup string) ([]string, error) {
	ret := m.ctrl.Call(m, "ListConsumeTopics", ctx, consumerGroup)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConsumeTopics indicates an expected call of ListConsumeTopics
func (mr *MockClientMockRecorder) ListConsumeTopics(ctx, consumerGroup interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConsumeTopics", reflect.TypeOf((*MockClient)(nil).ListConsumeTopics), ctx, consumerGroup)
}

// ListTopicsPartitionCounts mocks base method
func (m *MockClient) ListTopicsPartitionCounts(ctx context.Context, topics []string) (map[string]int, error) {
	ret := m.ctrl.Call(m, "ListTopicsPartitionCounts", ctx, topics)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTopicsPartitionCounts indicates an expected call of ListTopicsPartitionCounts
func (mr *MockClientMockRecorder) ListTopicsPartitionCounts(ctx, topics interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTopicsPartitionCounts", reflect.TypeOf((*MockClient)(nil).ListTopicsPartitionCounts), ctx, topics)
}
